#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define SYM 1
#define NAV 2
#define MOUSE 3
#define NUM 4

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
        };

        para: para {
            compatible = "zmk,behavior-tap-dance";
            label = "PARA";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        caps: caps {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS";
            #binding-cells = <0>;
            continue-list = <MINUS BACKSPACE>;
        };

        paraless: paraless {
            compatible = "zmk,behavior-mod-morph";
            label = "PARALESS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        paragreat: paragreat {
            compatible = "zmk,behavior-mod-morph";
            label = "PARAGREAT";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        mousemove: mousemove {
            compatible = "zmk,behavior-mouse-move";
            label = "MOUSEMOVE";
            #binding-cells = <1>;
            delay-ms = <10>;
            time-to-max-speed-ms = <100>;
            acceleration-exponent = <2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 18>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <15 21>;
        };

        perc {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <28 16>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        pound {
            bindings = <&kp POUND>;
            key-positions = <3 15>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <2 14>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <26 14>;
        };

        copy {
            bindings = <&kp K_COPY>;
            key-positions = <28 27>;
        };

        paste {
            bindings = <&kp K_PASTE>;
            key-positions = <26 27>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <8 20>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <32 20>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <7 19>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <31 19>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <30 18>;
        };

        leftbrack {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 32>;
        };

        rightbrack {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <33 32>;
        };
    };

    //

    keymap {
        compatible = "zmk,keymap";

        DEF {
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&kp TAB    &kp Q        &kp W       &kp F         &lt 3 P       &kp B      &kp J    &kp L              &kp U           &kp Y           &kp SEMICOLON  &kp BACKSPACE
&kp LSHFT  &hm LCTRL A  &hm LALT R  &hm LGUI S    &hm LSHIFT T  &lt 4 G    &kp M    &hm RIGHT_SHIFT N  &hm LEFT_GUI E  &hm LEFT_ALT I  &hm RCTRL O    &kp SQT
&kp LCTRL  &kp Z        &kp X       &kp C         &kp D         &kp V      &kp K    &kp H              &kp COMMA       &kp DOT         &kp SQT        &kp RSHFT
                                    &kp LEFT_GUI  &mo 1         &kp TAB    &kp RET  &lt 2 SPACE        &kp RIGHT_ALT
            >;
        };

        SYM {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            // | GUI | CTRL | SHFT | LWR | SPC |   | ENT | RSE  | BKSP | ALT | ESC |

            bindings = <
&trans  &kp UNDERSCORE  &kp AT            &kp PERCENT     &kp SQT               &kp N5        &kp ASTERISK     &kp MINUS              &kp HASH          &kp PIPE           &kp SEMICOLON  &trans
&trans  &kp SQT         &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp DOLLAR    &kp EXCLAMATION  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE   &kp RIGHT_BRACKET  &kp QUESTION   &trans
&trans  &kp BACKSLASH   &kp LEFT_BRACKET  &kp LESS_THAN   &kp TILDE             &kp GRAVE     &kp CARET        &trans                 &kp GREATER_THAN  &kp PERIOD         &kp SLASH      &trans
                                          &kp LGUI        &trans                &kp SPACE     &kp RET          &trans                 &trans
            >;
        };

        NAV {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &trans  &trans  &trans         &trans    &trans  &kp HOME              &kp LG(LEFT_BRACKET)  &kp LG(RIGHT_BRACKET)  &kp END                &trans
&trans  &trans  &trans  &trans  &kp LG(GRAVE)  &trans    &trans  &kp LEFT              &kp DOWN              &kp UP_ARROW           &kp RIGHT              &trans
&trans  &trans  &trans  &trans  &trans         &trans    &trans  &kp LA(LC(LG(LEFT)))  &kp PAGE_DOWN         &kp PG_UP              &kp LA(LC(LG(RIGHT)))  &trans
                        &trans  &trans         &trans    &trans  &trans                &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &mkp RCLK  &mkp LCLK  &trans  &trans    &trans  &trans                &trans                &trans              &trans                 &trans
&trans  &trans  &trans     &trans     &trans  &trans    &trans  &mousemove MOVE_LEFT  &mousemove MOVE_DOWN  &mousemove MOVE_UP  &mousemove MOVE_RIGHT  &trans
&trans  &trans  &trans     &trans     &trans  &trans    &trans  &mkp LCLK             &mkp RCLK             &trans              &bootloader            &trans
                           &trans     &trans  &trans    &trans  &trans                &trans
            >;
        };

        Num {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &kp MINUS   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp PLUS    &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &kp PERIOD  &kp N7        &kp N8        &kp N9        &kp EQUAL     &trans
                        &trans  &trans  &trans    &trans      &trans        &kp N0
            >;
        };
    };

    //conditional_layers {
    //    compatible = "zmk,conditional-layers";
    //
    //  l3 {
    //      if-layers = <1 2>;
    //      then-layer = <3>;
    //    };
    //};
};
